# Generated by Django 4.2.16 on 2025-01-15 16:11

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("configuraciones", "0002_sexo"),
    ]

    operations = [
        migrations.CreateModel(
            name="CantidadColaboradores",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "verbose_name": "Cantidad de colaboradores",
                "verbose_name_plural": "Cantidades de colaboradores",
                "ordering": ["nombre"],
            },
        ),
        migrations.CreateModel(
            name="Colaboradores",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "colaboradores_capacitados_alimentos",
                    models.BooleanField(
                        default=False,
                        verbose_name="3.1.2 ¿El Comedor/Merendero cuentan con personas que realizan tareas capacitadas para la manipulación de alimentos?",
                    ),
                ),
                (
                    "colaboradores_recibieron_capacitacion_alimentos",
                    models.BooleanField(default=False),
                ),
                (
                    "colaboradores_capacitados_salud_seguridad",
                    models.BooleanField(default=False),
                ),
                (
                    "colaboradores_recibieron_capacitacion_emergencias",
                    models.BooleanField(default=False),
                ),
                (
                    "colaboradores_recibieron_capacitacion_violencia",
                    models.BooleanField(
                        default=False,
                        verbose_name="¿Los colaboradores recibieron capacitación sobre prevención de violencia de género incluyendo acoso sexual, explotación sexual y abuso infantil?",
                    ),
                ),
                (
                    "cantidad_colaboradores",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="comedores.cantidadcolaboradores",
                        verbose_name="3.1.1 ¿Qué cantidad de personas realizan tareas en el Comedor / Merendero?",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Comedor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "gestionar_uid",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("nombre", models.CharField(max_length=255)),
                (
                    "comienzo",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1900),
                            django.core.validators.MaxValueValidator(2025),
                        ],
                        verbose_name="Año en el que comenzó a funcionar",
                    ),
                ),
                ("calle", models.CharField(blank=True, max_length=255, null=True)),
                ("numero", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "entre_calle_1",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "entre_calle_2",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("partido", models.CharField(blank=True, max_length=255, null=True)),
                ("barrio", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "codigo_postal",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1000),
                            django.core.validators.MaxValueValidator(999999),
                        ],
                    ),
                ),
                (
                    "foto_legajo",
                    models.ImageField(blank=True, null=True, upload_to="comedor/"),
                ),
                (
                    "localidad",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="configuraciones.localidad",
                    ),
                ),
                (
                    "municipio",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="configuraciones.municipio",
                    ),
                ),
                (
                    "provincia",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="configuraciones.provincia",
                    ),
                ),
            ],
            options={
                "verbose_name": "comedor",
                "verbose_name_plural": "comedores",
                "ordering": ["nombre"],
            },
        ),
        migrations.CreateModel(
            name="EstadosIntervencion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255)),
            ],
            options={
                "verbose_name": "EstadosIntervencion",
                "verbose_name_plural": "EstadosIntervenciones",
            },
        ),
        migrations.CreateModel(
            name="FrecuenciaLimpieza",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "verbose_name": "Frecuencia de limpieza",
                "verbose_name_plural": "Frecuencias de limpieza",
                "ordering": ["nombre"],
            },
        ),
        migrations.CreateModel(
            name="FrecuenciaRecepcionRecursos",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "verbose_name": "Frecuencia de recepcion de recursos",
                "verbose_name_plural": "Frecuencias de recepcion de recursos",
                "ordering": ["nombre"],
            },
        ),
        migrations.CreateModel(
            name="FuenteCompras",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("almacen_cercano", models.BooleanField(default=False)),
                ("verduleria", models.BooleanField(default=False)),
                ("granja", models.BooleanField(default=False)),
                ("carniceria", models.BooleanField(default=False)),
                ("pescaderia", models.BooleanField(default=False)),
                ("supermercado", models.BooleanField(default=False)),
                ("mercado_central", models.BooleanField(default=False)),
                ("ferias_comunales", models.BooleanField(default=False)),
                ("mayoristas", models.BooleanField(default=False)),
                ("otro", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "Fuente de compras",
                "verbose_name_plural": "Fuentes de compras",
            },
        ),
        migrations.CreateModel(
            name="Prestacion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "lunes_desayuno_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "lunes_desayuno_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "lunes_almuerzo_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "lunes_almuerzo_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "lunes_merienda_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "lunes_merienda_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "lunes_cena_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "lunes_cena_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "martes_desayuno_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "martes_desayuno_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "martes_almuerzo_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "martes_almuerzo_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "martes_merienda_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "martes_merienda_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "martes_cena_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "martes_cena_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "miercoles_desayuno_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "miercoles_desayuno_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "miercoles_almuerzo_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "miercoles_almuerzo_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "miercoles_merienda_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "miercoles_merienda_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "miercoles_cena_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "miercoles_cena_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "jueves_desayuno_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "jueves_desayuno_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "jueves_almuerzo_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "jueves_almuerzo_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "jueves_merienda_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "jueves_merienda_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "jueves_cena_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "jueves_cena_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "viernes_desayuno_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "viernes_desayuno_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "viernes_almuerzo_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "viernes_almuerzo_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "viernes_merienda_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "viernes_merienda_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "viernes_cena_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "viernes_cena_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "sabado_desayuno_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "sabado_desayuno_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "sabado_almuerzo_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "sabado_almuerzo_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "sabado_merienda_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "sabado_merienda_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "sabado_cena_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "sabado_cena_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "domingo_desayuno_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "domingo_desayuno_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "domingo_almuerzo_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "domingo_almuerzo_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "domingo_merienda_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "domingo_merienda_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "domingo_cena_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "domingo_cena_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
            ],
            options={
                "verbose_name": "Prestacion",
                "verbose_name_plural": "Prestaciones",
            },
        ),
        migrations.CreateModel(
            name="Referente",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nombre",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Nombre del referente",
                    ),
                ),
                (
                    "apellido",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Apellido del referente",
                    ),
                ),
                (
                    "mail",
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        null=True,
                        verbose_name="Mail del referente",
                    ),
                ),
                (
                    "celular",
                    models.BigIntegerField(
                        blank=True, null=True, verbose_name="Celular del referente"
                    ),
                ),
                (
                    "documento",
                    models.BigIntegerField(
                        blank=True, null=True, verbose_name="Documento del referente"
                    ),
                ),
                (
                    "funcion",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Funcion del referente",
                    ),
                ),
            ],
            options={
                "verbose_name": "Referente",
                "verbose_name_plural": "Referentes",
            },
        ),
        migrations.CreateModel(
            name="Territorial",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("gestionar_uid", models.CharField(max_length=255)),
                ("nombre", models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="TipoAgua",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "verbose_name": "Tipo de abastecimiento de agua",
                "verbose_name_plural": "Tipos de abastecimientos de agua",
                "ordering": ["nombre"],
            },
        ),
        migrations.CreateModel(
            name="TipoCombustible",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "verbose_name": "Tipo de abastecimiento de combustible",
                "verbose_name_plural": "Tipos de abastecimientos de combustible",
                "ordering": ["nombre"],
            },
        ),
        migrations.CreateModel(
            name="TipodeComedor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255)),
            ],
            options={
                "verbose_name": "TipodeComedor",
                "verbose_name_plural": "TipodeComedor",
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="TipoDesague",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "verbose_name": "Tipo de desague del hinodoro",
                "verbose_name_plural": "Tipos de desagues del hinodoro",
                "ordering": ["nombre"],
            },
        ),
        migrations.CreateModel(
            name="TipoEspacio",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "verbose_name": "Tipo de espacio fisico",
                "verbose_name_plural": "Tipos de espacios fisicos",
                "ordering": ["nombre"],
            },
        ),
        migrations.CreateModel(
            name="TipoGestionQuejas",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "verbose_name": "Tipo de gestion de quejas",
                "verbose_name_plural": "Tipos de gestion de quejas",
            },
        ),
        migrations.CreateModel(
            name="TipoIntervencion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255)),
            ],
            options={
                "verbose_name": "TipoIntervencion",
                "verbose_name_plural": "TiposIntervencion",
            },
        ),
        migrations.CreateModel(
            name="TipoModalidadPrestacion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "verbose_name": "Tipo de Modalidad de Prestación",
                "verbose_name_plural": "Tipos de Modalidades de Prestación",
                "ordering": ["nombre"],
            },
        ),
        migrations.CreateModel(
            name="TipoRecurso",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "verbose_name": "Tipo de recurso recibido",
                "verbose_name_plural": "Tipos de recursos recibidos",
                "ordering": ["nombre"],
            },
        ),
        migrations.CreateModel(
            name="ValorComida",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("tipo", models.CharField(max_length=50)),
                ("valor", models.DecimalField(decimal_places=2, max_digits=10)),
                ("fecha", models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name="SubIntervencion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255)),
                (
                    "fk_subintervencion",
                    models.ForeignKey(
                        default=1,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="comedores.tipointervencion",
                    ),
                ),
            ],
            options={
                "verbose_name": "SubIntervencion",
                "verbose_name_plural": "SubIntervenciones",
            },
        ),
        migrations.CreateModel(
            name="ImagenComedor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("imagen", models.ImageField(upload_to="comedor/")),
                (
                    "comedor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="imagenes",
                        to="comedores.comedor",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FuncionamientoPrestacion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("servicio_por_turnos", models.BooleanField(default=False)),
                (
                    "cantidad_turnos",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(3),
                        ],
                    ),
                ),
                (
                    "modalidad_prestacion",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="comedores.tipomodalidadprestacion",
                        verbose_name="1.1.4 Modalidad de prestación",
                    ),
                ),
            ],
            options={
                "verbose_name": "Funcionamiento de comedor",
                "verbose_name_plural": "Funcionamientos de comedores",
            },
        ),
        migrations.CreateModel(
            name="FuenteRecursos",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("recibe_donaciones_particulares", models.BooleanField(default=False)),
                ("recibe_estado_nacional", models.BooleanField(default=False)),
                ("recibe_estado_provincial", models.BooleanField(default=False)),
                ("recibe_estado_municipal", models.BooleanField(default=False)),
                ("recibe_otros", models.BooleanField(default=False)),
                (
                    "frecuencia_donaciones_particulares",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="frecuencia_donaciones_particulares",
                        to="comedores.frecuenciarecepcionrecursos",
                        verbose_name="4.1.8 Si recibe, ¿Con qué frecuencia recibe donaciones particulares?",
                    ),
                ),
                (
                    "frecuencia_estado_municipal",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="frecuencia_estado_municipal",
                        to="comedores.frecuenciarecepcionrecursos",
                        verbose_name="4.1.16Si recibe, ¿Con qué frecuencia recibe del estado municipal?",
                    ),
                ),
                (
                    "frecuencia_estado_nacional",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="frecuencia_estado_nacional",
                        to="comedores.frecuenciarecepcionrecursos",
                        verbose_name="4.1.10 Si recibe, ¿Con qué frecuencia recibe del estado nacional?",
                    ),
                ),
                (
                    "frecuencia_estado_provincial",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="frecuencia_estado_provincial",
                        to="comedores.frecuenciarecepcionrecursos",
                        verbose_name="4.1.12 Si recibe, ¿Con qué frecuencia recibe del estado provincial?",
                    ),
                ),
                (
                    "frecuencia_otros",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="frecuencia_otros",
                        to="comedores.frecuenciarecepcionrecursos",
                        verbose_name="4.1.18 Si recibe, ¿Con qué frecuencia recibe de otras fuentes?",
                    ),
                ),
                (
                    "recursos_donaciones_particulares",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="tipo_donaciones_particulares",
                        to="comedores.tiporecurso",
                        verbose_name="4.1.9 ¿Qué tipo de recursos recibe de donaciones particulares?",
                    ),
                ),
                (
                    "recursos_estado_municipal",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="tipo_estado_municipal",
                        to="comedores.tiporecurso",
                        verbose_name="4.1.17 ¿Qué tipo de recursos recibe del estado municipal?",
                    ),
                ),
                (
                    "recursos_estado_nacional",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="tipo_estado_nacional",
                        to="comedores.tiporecurso",
                        verbose_name="4.1.11 ¿Qué tipo de recursos recibe del estado nacional?",
                    ),
                ),
                (
                    "recursos_estado_provincial",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="tipo_estado_provincial",
                        to="comedores.tiporecurso",
                        verbose_name="4.1.15 ¿Qué tipo de recursos recibe del estado provincial?",
                    ),
                ),
                (
                    "recursos_otros",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="tipo_otros",
                        to="comedores.tiporecurso",
                        verbose_name="4.1.19 ¿Qué tipo de recursos recibe de otras fuentes?",
                    ),
                ),
            ],
            options={
                "verbose_name": "Fuente de recursos",
                "verbose_name_plural": "Fuentes de recursos",
            },
        ),
        migrations.CreateModel(
            name="EspacioPrestacion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("espacio_equipado", models.BooleanField(default=False)),
                ("tiene_ventilacion", models.BooleanField(default=False)),
                ("tiene_salida_emergencia", models.BooleanField(default=False)),
                ("salida_emergencia_senializada", models.BooleanField(default=False)),
                ("tiene_equipacion_incendio", models.BooleanField(default=False)),
                ("tiene_botiquin", models.BooleanField(default=False)),
                ("tiene_buena_iluminacion", models.BooleanField(default=False)),
                ("tiene_sanitarios", models.BooleanField(default=False)),
                (
                    "gestion_quejas_otro",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="En caso de otro, especificar",
                    ),
                ),
                ("informacion_quejas", models.BooleanField(default=False)),
                (
                    "desague_hinodoro",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="comedores.tipodesague",
                        verbose_name="2.3.9 Si la respuesta anterior es SI, el desagüe del inodoro es",
                    ),
                ),
                (
                    "frecuencia_limpieza",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="comedores.frecuencialimpieza",
                        verbose_name="2.4.1 ¿Con qué frecuencia se realiza la limpieza de las instalaciones?",
                    ),
                ),
                (
                    "gestion_quejas",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="comedores.tipogestionquejas",
                        verbose_name="2.3.10 ¿El Comedor/Merendero cuenta con alguna forma de registro de los reclamos sobre la prestacion alimentaria",
                    ),
                ),
            ],
            options={
                "verbose_name": "Espacio donde se brinda la prestacion del Comedor/Merendero",
                "verbose_name_plural": "Espacios donde se brinda la prestacion del Comedor/Merendero",
            },
        ),
        migrations.CreateModel(
            name="EspacioCocina",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("espacio_elaboracion_alimentos", models.BooleanField(default=False)),
                ("almacenamiento_alimentos_secos", models.BooleanField(default=False)),
                ("heladera", models.BooleanField(default=False)),
                ("freezer", models.BooleanField(default=False)),
                ("recipiente_residuos_organicos", models.BooleanField(default=False)),
                ("recipiente_residuos_reciclables", models.BooleanField(default=False)),
                ("otros_residuos", models.BooleanField(default=False)),
                ("recipiente_otros_residuos", models.BooleanField(default=False)),
                (
                    "abastecimiento_agua_otro",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="En caso de otro, especificar",
                    ),
                ),
                ("instalacion_electrica", models.BooleanField(default=False)),
                (
                    "abastecimiento_agua",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="comedores.tipoagua",
                        verbose_name="2.2.8 El abastecimiento del agua es con",
                    ),
                ),
                (
                    "abastecimiento_combustible",
                    models.ManyToManyField(
                        blank=True,
                        related_name="espacios",
                        to="comedores.tipocombustible",
                        verbose_name="2.2.7 Para cocinar utiliza",
                    ),
                ),
            ],
            options={
                "verbose_name": "Espacio de cocina y almacenamiento de alimentos",
                "verbose_name_plural": "Espacios de cocina y almacenamiento de alimentos",
            },
        ),
        migrations.CreateModel(
            name="Espacio",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "espacio_fisico_otro",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="2.1.2 Si eligió 'Otro', especificar",
                    ),
                ),
                (
                    "cocina",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="comedores.espaciococina",
                    ),
                ),
                (
                    "prestacion",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="comedores.espacioprestacion",
                    ),
                ),
                (
                    "tipo_espacio_fisico",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="comedores.tipoespacio",
                        verbose_name="2.1.1 ¿En qué tipo de espacio físico funciona el Comedor/Merendero?",
                    ),
                ),
            ],
            options={
                "verbose_name": "Espacio fisico de comedor",
                "verbose_name_plural": "Espacios fisicos de comedores",
            },
        ),
        migrations.AddField(
            model_name="comedor",
            name="referente",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="comedores.referente",
            ),
        ),
        migrations.AddField(
            model_name="comedor",
            name="tipocomedor",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="comedores.tipodecomedor",
            ),
        ),
        migrations.CreateModel(
            name="Relevamiento",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "gestionar_uid",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("estado", models.CharField(blank=True, max_length=255, null=True)),
                ("fecha_visita", models.DateTimeField(blank=True, null=True)),
                ("observacion", models.TextField(blank=True, null=True)),
                ("docPDF", models.URLField(blank=True, null=True)),
                ("responsable_es_referente", models.BooleanField(default=True)),
                (
                    "colaboradores",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="comedores.colaboradores",
                    ),
                ),
                (
                    "comedor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="comedores.comedor",
                    ),
                ),
                (
                    "compras",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="comedores.fuentecompras",
                    ),
                ),
                (
                    "espacio",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="comedores.espacio",
                    ),
                ),
                (
                    "funcionamiento",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="comedores.funcionamientoprestacion",
                    ),
                ),
                (
                    "prestacion",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="comedores.prestacion",
                    ),
                ),
                (
                    "recursos",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="comedores.fuenterecursos",
                    ),
                ),
                (
                    "responsable",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="comedores.referente",
                    ),
                ),
                (
                    "territorial",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="comedores.territorial",
                    ),
                ),
            ],
            options={
                "verbose_name": "Relevamiento",
                "verbose_name_plural": "Relevamientos",
                "indexes": [
                    models.Index(
                        fields=["comedor"], name="comedores_r_comedor_b42af5_idx"
                    )
                ],
                "unique_together": {("comedor", "fecha_visita")},
            },
        ),
        migrations.CreateModel(
            name="Observacion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "gestionar_uid",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("observador", models.CharField(blank=True, max_length=255)),
                (
                    "fecha_visita",
                    models.DateTimeField(blank=True, default=django.utils.timezone.now),
                ),
                ("observacion", models.TextField()),
                (
                    "comedor",
                    models.ForeignKey(
                        blank=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="comedores.comedor",
                    ),
                ),
            ],
            options={
                "verbose_name": "Observacion",
                "verbose_name_plural": "Observaciones",
                "indexes": [
                    models.Index(
                        fields=["comedor"], name="comedores_o_comedor_36d2df_idx"
                    )
                ],
                "unique_together": {("comedor", "fecha_visita")},
            },
        ),
        migrations.CreateModel(
            name="Nomina",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("fecha", models.DateTimeField(auto_now_add=True)),
                ("observaciones", models.TextField(blank=True, null=True)),
                ("nombre", models.TextField(blank=True, null=True)),
                ("apellido", models.TextField(blank=True, null=True)),
                ("dni", models.IntegerField(blank=True, null=True)),
                (
                    "fk_comedor",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="comedores.comedor",
                    ),
                ),
                (
                    "fk_estado",
                    models.ForeignKey(
                        default=1,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="comedores.estadosintervencion",
                    ),
                ),
                (
                    "fk_sexo",
                    models.ForeignKey(
                        default=1,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="configuraciones.sexo",
                    ),
                ),
            ],
            options={
                "verbose_name": "Nomina",
                "verbose_name_plural": "Nominas",
                "ordering": ["-fecha"],
                "indexes": [
                    models.Index(
                        fields=["fk_comedor"], name="comedores_n_fk_come_c88eb9_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="Intervencion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("fecha", models.DateTimeField(auto_now_add=True)),
                ("observaciones", models.TextField(blank=True, null=True)),
                (
                    "fk_comedor",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="comedores.comedor",
                    ),
                ),
                (
                    "fk_estado",
                    models.ForeignKey(
                        default=1,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="comedores.estadosintervencion",
                    ),
                ),
                (
                    "fk_subintervencion",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="comedores.subintervencion",
                    ),
                ),
                (
                    "fk_tipo_intervencion",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="comedores.tipointervencion",
                    ),
                ),
            ],
            options={
                "verbose_name": "Intervencion",
                "verbose_name_plural": "Intervenciones",
                "ordering": ["-fecha"],
                "indexes": [
                    models.Index(
                        fields=["fk_comedor"], name="comedores_i_fk_come_87e415_idx"
                    )
                ],
            },
        ),
        migrations.AddIndex(
            model_name="comedor",
            index=models.Index(fields=["nombre"], name="comedores_c_nombre_a1fc3f_idx"),
        ),
    ]
